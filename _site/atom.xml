<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Joy iOS</title>
 <link href="https://liufan321.github.io/atom.xml" rel="self"/>
 <link href="https://liufan321.github.io/"/>
 <updated>2015-10-05T22:31:14+08:00</updated>
 <id>https://liufan321.github.io</id>
 <author>
   <name>刀哥</name>
   <email>liufan@joyios.com</email>
 </author>

 
 <entry>
   <title>自定义 NSLog</title>
   <link href="https://liufan321.github.io/2015/10/05/customize_nslog/"/>
   <updated>2015-10-05T00:00:00+08:00</updated>
   <id>https://liufan321.github.io/2015/10/05/customize_nslog</id>
   <content type="html">&lt;h2&gt;问题&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;开发中用了大量的 &lt;code&gt;NSLog&lt;/code&gt;，但是发布时想取消这些 &lt;code&gt;NSLog&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;开发中是否经常用过 &lt;code&gt;NSLog(@&amp;quot;%s&amp;quot;, __FUNCTION__);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;解决问题&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;新建 &lt;code&gt;ExtendNSLog&lt;/code&gt; 类，继承自 &lt;code&gt;NSObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;ExtendNSLog.h&lt;/code&gt; 中删除默认代码&lt;/li&gt;
&lt;li&gt;添加以下函数声明：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExtendNSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;functionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;ExtendNSLog.m&lt;/code&gt; 中删除默认代码&lt;/li&gt;
&lt;li&gt;添加以下代码实现：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExtendNSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;functionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;va_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;va_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hasSuffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stringByAppendingString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;initWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;va_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stringWithUTF8String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(%s) (%s:%d) %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;functionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UTF8String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lineNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UTF8String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;新建 &lt;code&gt;PrefixHeader.pch&lt;/code&gt; 文件&lt;/li&gt;
&lt;li&gt;输入以下内容：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifdef __OBJC__&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;ExtendNSLog.h&amp;quot;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef DEBUG&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define NSLog(args...) ExtendNSLog(__FILE__, __LINE__, __PRETTY_FUNCTION__, args);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define NSLog(x...)&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;选择 &lt;code&gt;项目&lt;/code&gt;-&amp;gt;&lt;code&gt;TARGETS&lt;/code&gt;-&amp;gt;&lt;code&gt;[ProjectName]&lt;/code&gt;-&amp;gt;&lt;code&gt;Build Settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在搜索框输入 &lt;code&gt;prefix header&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;Prefix Header&lt;/code&gt;中输入 &lt;code&gt;[ProjectName]/PrefixHeader.pch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如下图所示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20151005-01-set_prefix_header.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;运行测试，如下图修改运行模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20151005-02-set_scheme_mode.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;搞定收工！&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>BLOCK写递归</title>
   <link href="https://liufan321.github.io/2015/06/24/objc_block_recursion/"/>
   <updated>2015-06-24T00:00:00+08:00</updated>
   <id>https://liufan321.github.io/2015/06/24/objc_block_recursion</id>
   <content type="html">&lt;p&gt;今天又有同学面试被问到用 blcok 写递归了，写一个留在这里哈，有兴趣的同学面试前查阅一下。&lt;/p&gt;

&lt;p&gt;首先来一个 oc 的递归：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写递归算法只需要记住两点即可：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;有一个明确的出口&lt;/li&gt;
&lt;li&gt;不满足条件出口时，自己调用自己&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;按照以上思路用 block 改写一下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sumBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，要做到自己调用自己，需要能够准确的在内存中找到 &lt;code&gt;block&lt;/code&gt; 的函数入口，因此需要使用 &lt;code&gt;static&lt;/code&gt; 修饰符号，其他就没啥了&lt;/p&gt;

&lt;p&gt;另外，面试中如果被问到，一定要说下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每调用一次自己，系统都会开辟一个栈桢记录临时变量和参数&lt;/li&gt;
&lt;li&gt;递归次数过多，会出现栈溢出错误&lt;/li&gt;
&lt;li&gt;移动开发中不建议使用递归算法，现在主线程栈区只有 &lt;code&gt;512K&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面的测试代码调用 &lt;code&gt;NSLog(@&amp;quot;%d&amp;quot;, sumBlock(1024 * 128));&lt;/code&gt; 就会出现栈溢出错误&lt;/p&gt;

&lt;p&gt;提问：为啥 &lt;code&gt;1024 * 128&lt;/code&gt; 会栈溢出呢？:P&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GitBook 配置</title>
   <link href="https://liufan321.github.io/2015/02/26/gitbook_config/"/>
   <updated>2015-02-26T00:00:00+08:00</updated>
   <id>https://liufan321.github.io/2015/02/26/gitbook_config</id>
   <content type="html">&lt;p&gt;1&amp;gt; 下载并安装 npm&lt;/p&gt;

&lt;p&gt;node-v0.12.0.pkg &lt;a href=&quot;http://nodejs.org/download/&quot;&gt;http://nodejs.org/download/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2&amp;gt; 安装 gitbook&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo npm install gitbook-cli -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3&amp;gt; 进入终端 cd 到新建的电子书目录&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch SUMMARY.md
&lt;span class=&quot;c&quot;&gt;# 第一次运行需要 sudo&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitbook init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4&amp;gt; 下载并安装 gitbookEditor，gitbook 本地编辑器 &lt;a href=&quot;https://github.com/GitbookIO/editor/releases&quot;&gt;https://github.com/GitbookIO/editor/releases&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;打开并选择刚刚 init 的目录即可编辑&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5&amp;gt; 本地预览&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 第一次运行需要 sudo&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitbook serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6&amp;gt; 生成 html 电子书&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 第一次运行需要 sudo&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitbook build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7&amp;gt; 下载并安装 calibre，生成电子书使用&lt;/p&gt;

&lt;p&gt;calibre-2.20.0 &lt;a href=&quot;http://calibre-ebook.com/download_osx&quot;&gt;http://calibre-ebook.com/download_osx&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在终端输入&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8&amp;gt; 生成电子书&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitbook epub

或者

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitbook pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8&amp;gt; .gitignore &lt;a href=&quot;https://github.com/github/gitignore.git&quot;&gt;https://github.com/github/gitignore.git&lt;/a&gt;        &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>NS_ENUM & NS_OPTIONS</title>
   <link href="https://liufan321.github.io/2015/01/12/ns_enum_vs_ns_options/"/>
   <updated>2015-01-12T00:00:00+08:00</updated>
   <id>https://liufan321.github.io/2015/01/12/ns_enum_vs_ns_options</id>
   <content type="html">&lt;p&gt;&lt;code&gt;NS_ENUM&lt;/code&gt; 和 &lt;code&gt;NS_OPTIONS&lt;/code&gt; 是在 iOS 6 推出用于代替 enum 的更好的办法&lt;/p&gt;

&lt;h2&gt;enum&lt;/h2&gt;

&lt;p&gt;在以前，要定义枚举类型，都是使用 &lt;code&gt;enum&lt;/code&gt; 来实现的，这是在 C 语言中预设定义常量的方法&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;enum&lt;/code&gt; 定义枚举可以有以下两种方式：&lt;/p&gt;

&lt;h3&gt;1. 定义枚举&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;enum {
    UITableViewCellStyleDefault,
    UITableViewCellStyleValue1,
    UITableViewCellStyleValue2,
    UITableViewCellStyleSubtitle
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方法只定义枚举，但是不定义类型&lt;/p&gt;

&lt;h3&gt;2. 定义枚举 同时定义类型&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;typedef enum {
    UITableViewCellStyleDefault,
    UITableViewCellStyleValue1,
    UITableViewCellStyleValue2,
    UITableViewCellStyleSubtitle
} UITableViewCellStyle;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义 &lt;code&gt;UITableViewCellStyle&lt;/code&gt; 类型并且预设枚举类型&lt;/p&gt;

&lt;p&gt;大概在 iOS 5.0 时期，苹果公司采用以下方式定义枚举类型&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;typedef enum {
    UITableViewCellStyleDefault,
    UITableViewCellStyleValue1,
    UITableViewCellStyleValue2,
    UITableViewCellStyleSubtitle
};

typedef NSInteger UITableViewCellStyle;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方式指定了 &lt;code&gt;UITableViewCellStyle&lt;/code&gt; 的数据类型，但并没有告诉编译器这个类型与之前的 &lt;code&gt;enum&lt;/code&gt; 有什么关系&lt;/p&gt;

&lt;p&gt;再后来，苹果推出了 &lt;code&gt;NS_ENUM&lt;/code&gt; &amp;amp; &lt;code&gt;NS_OPTIONS&lt;/code&gt; 两个宏来定义枚举类型&lt;/p&gt;

&lt;h2&gt;NS_ENUM&lt;/h2&gt;

&lt;p&gt;如果查看今天的 &lt;code&gt;UITableViewCell.h&lt;/code&gt; 会发现，枚举类型的定义已经变为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;typedef NS_ENUM(NSInteger, UITableViewCellStyle) {
    UITableViewCellStyleDefault,
    UITableViewCellStyleValue1, 
    UITableViewCellStyleValue2, 
    UITableViewCellStyleSubtitle
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数说明&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;枚举的数据类型&lt;/li&gt;
&lt;li&gt;枚举类型的名称&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大括号里面和以前 &lt;code&gt;enum&lt;/code&gt; 一样，是需要定义的预设值&lt;/p&gt;

&lt;p&gt;这种实现方法可以在 &lt;code&gt;switch&lt;/code&gt; 语句中检查类型&lt;/p&gt;

&lt;h2&gt;NS_OPTIONS&lt;/h2&gt;

&lt;p&gt;在 C 语言开发时，也可以使用&lt;strong&gt;按位掩码（bitmask）&lt;/strong&gt;来定义枚举类型&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;typedef enum {
    NSJSONReadingMutableContainers = (1UL &amp;lt;&amp;lt; 0),
    NSJSONReadingMutableLeaves = (1UL &amp;lt;&amp;lt; 1),
    NSJSONReadingAllowFragments = (1UL &amp;lt;&amp;lt; 2)
} NSJSONReadingOptions;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;strong&gt;按位掩码&lt;/strong&gt;枚举的最大的好处在于：&lt;strong&gt;只使用一个参数便可以传递各种选项的组合&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;按位或(|)&lt;/strong&gt;为枚举类型赋值&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;按位与(&amp;amp;)&lt;/strong&gt;判断是否设置了某个选项&lt;/li&gt;
&lt;li&gt;传入&lt;strong&gt;0&lt;/strong&gt;表示什么附加选线都没有&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 OC 中，要定义按位掩码的枚举类型，可以使用 &lt;code&gt;NS_OPTIONS&lt;/code&gt; 宏，示例如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;typedef NS_OPTIONS(NSUInteger, NSJSONReadingOptions) {
    NSJSONReadingMutableContainers = (1UL &amp;lt;&amp;lt; 0),
    NSJSONReadingMutableLeaves = (1UL &amp;lt;&amp;lt; 1),
    NSJSONReadingAllowFragments = (1UL &amp;lt;&amp;lt; 2)
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;又如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;typedef NS_OPTIONS(NSUInteger, NSKeyValueObservingOptions) {
    NSKeyValueObservingOptionNew = 0x01,
    NSKeyValueObservingOptionOld = 0x02,
    NSKeyValueObservingOptionInitial = 0x04,
    NSKeyValueObservingOptionPrior = 0x08
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今后大家看到凡是用 &lt;code&gt;NS_OPTIONS&lt;/code&gt; 定义的枚举，就可以：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;按位或(|)&lt;/strong&gt;指定多个选项的组合&lt;/li&gt;
&lt;li&gt;如果不需要任何附加选项，直接传入 0，这样效率最高，:D&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>从.H文件中提取文档</title>
   <link href="https://liufan321.github.io/2014/12/12/generate-doc-from-header-file/"/>
   <updated>2014-12-12T00:00:00+08:00</updated>
   <id>https://liufan321.github.io/2014/12/12/generate-doc-from-header-file</id>
   <content type="html">&lt;h1&gt;headerdoc2html&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;作用：处理头文件，并基于特殊格式的注释生成HTML文档&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;示例：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
$ find . -name \*.h | xargs headerdoc2html -o ~/Desktop/docs -j
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;说明：

&lt;ol&gt;
&lt;li&gt;遍历当前文件夹及子文件夹&lt;/li&gt;
&lt;li&gt;查找所有 .h 文件&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;headerdoc2html&lt;/code&gt;生成 .h 的文档并输出至 ~/Desktop/docs 目录中&lt;/li&gt;
&lt;li&gt;允许 .h 文件中使用&lt;code&gt;javadoc&lt;/code&gt;的注释格式 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;xargs&lt;/code&gt;命令可以将&lt;code&gt;find&lt;/code&gt;的结果分块传递给&lt;code&gt;headerdoc2html&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;从.h中提取文档&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;作用：处理&lt;code&gt;headerdoc2html&lt;/code&gt;的输出目录，创建一个链接到每个标题文档的索引页面&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
$ gatherheaderdoc ~/Desktop/docs
&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用 Jekyll 和 GitHub Pages 搭建博客</title>
   <link href="https://liufan321.github.io/2014/11/11/introducing-lanyon/"/>
   <updated>2014-11-11T00:00:00+08:00</updated>
   <id>https://liufan321.github.io/2014/11/11/introducing-lanyon</id>
   <content type="html">&lt;h3&gt;1. 注册 GitHub 账号并生成 SSH Keys&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;目前拥有140多万开发者用户，号称程序员的Facebook，具有极高的人气，许多重要的项目都托管在上面。&lt;/p&gt;

&lt;p&gt;注册一个 GitHub 账号，可以和世界优秀的程序员零距离接触，相信在不远的将来，我也会成为一名优秀的程序员，:P&lt;/p&gt;

&lt;p&gt;注册账号之后，为了方便使用，建议在本地生成一个 SSH Key，具体操作步骤可以访问 &lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys/&quot;&gt;https://help.github.com/articles/generating-ssh-keys/&lt;/a&gt;。&lt;/p&gt;

&lt;h3&gt;2. 为博客项目创建代码库并 clone 到本地&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;选择 Repositories，然后点击 New，创建一个代码库，代码库的名称是：[username].github.io&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;提示：[username]，是注册的 GitHub 用户名&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;在终端中将新建的代码库 clone 到本地&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git clone https://github.com/[username]/[username].github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. 安装相关软件&lt;/h3&gt;

&lt;p&gt;本环节的步骤只需执行一次即可：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem install jekyll
$ jekyll new [username].github.io.git
$ cd [username].github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4. 选择并安装 Jekyll 模版&lt;/h3&gt;

&lt;p&gt;在 GitHub 中搜索 jekyll theme 然后选择一款喜欢的模板，下载到本地并且解压缩到自己的博客目录中。&lt;/p&gt;

&lt;p&gt;按照模板中的时候说明进行相应的配置，通常需要编辑一下 _config.yml 文件，设置自己博客的标题以及其他相关信息。&lt;/p&gt;

&lt;h3&gt;5. 编写博文 &amp;amp; 测试&lt;/h3&gt;

&lt;p&gt;在 _posts 目录中，新建一个文件，文件名格式如下 &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;yyyy-MM-dd-topic-name.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：topic-name中不要有中文、大写字符以及空格，如果有多个单词可以使用 &amp;quot;-&amp;quot; 连接。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用一款熟悉的文本编辑器打开这个 .md 文件，撰写博客内容即可。&lt;/p&gt;

&lt;p&gt;文章头部的格式如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;---
layout: post
title: 博文主题
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然啦，在编写博客的时候测试，测试是必不可少的。打开终端中，进入本地博客代码库的主目录，然后输入：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着打开浏览器，在地址栏中输入&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http://localhost:4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就可以边写便刷新，查看博客的最终效果了，:P&lt;/p&gt;

&lt;p&gt;关于内容格式的方面，分享几个实用的技巧：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  行首使用 # 表示标题1&lt;/li&gt;
&lt;li&gt;  行首使用 ## 表示标题2，依次类推……&lt;/li&gt;
&lt;li&gt;  行首使用 * 表示项目列表&lt;/li&gt;
&lt;li&gt;  行首使用 &amp;gt; 表示引用文字&lt;/li&gt;
&lt;li&gt;  如果需要插入代码

&lt;ul&gt;
&lt;li&gt;  三个连续的 &amp;#96;&amp;#96;&amp;#96; 回车(代码段开始)&lt;/li&gt;
&lt;li&gt;  粘贴代码块&lt;/li&gt;
&lt;li&gt;  三个连续的 &amp;#96;&amp;#96;&amp;#96; 回车(代码段结束)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;怎么样？感觉还不错吧，哈哈！&lt;/p&gt;

&lt;h3&gt;6. 提交博文&lt;/h3&gt;

&lt;p&gt;在终端中输入：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git add .
$ git commit -a -m &amp;quot;新建文章&amp;quot;
$ git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;如果是第一次提交，GitHub 大概需要 15 分钟左右生成博客，此后就可以通过 [username].github.io 访问新的博客了，:P&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 

</feed>
